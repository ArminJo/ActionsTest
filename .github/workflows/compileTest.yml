# This is the name of the workflow, visible on GitHub UI.
name: compileTest
on: [push]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.

jobs:
  # This is the name of the job - can be whatever.
  compileTest-matrix:
    name: Test compiling one example
    
    env:
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      BLUE: '\033[0;34m'
      
    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    strategy:

      matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`
        ####################################################################
        arduino-platform: ["arduino:avr", "digistump:avr", "ATTinyCore:avr"]
        ####################################################################


        # Define the FQBN of the boards we want to test for each platform.
        # This works like this: when the platformn is "digistump:avr", the
        # variable `fqbn` is set to "digistump:avr:digispark-tiny".
        ##################################################################
        include:
          - arduino-platform: "digistump:avr"
            fqbn: "digistump:avr:digispark-tiny" # ATtiny85 board @1 MHz 
            examples: "SimpleFrequencyDetector" # Space separated list of examples to build, build all if omitted or empty
            
          - arduino-platform: "ATTinyCore:avr"
            fqbn: "ATTinyCore:avr:attinyx5:chip=85,clock=1internal"
            
          - arduino-platform: "arduino:avr"
            fqbn: "arduino:avr:uno"
        ###################################################################
        
      # Do not cancel all jobs / architectures if one job fails
      fail-fast: false

    # I picked Ubuntu to use shell scripts.
    runs-on: ubuntu-latest

    # This is the list of steps this job will run.
    steps:
    
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0
        
      # Here we have only the matrix values for this job i.e. only one platform and fqbn
      #- name: Dump matrix context
      #  run: echo " ${{ toJson(matrix) }} "
        
      - name: Link this repository as Arduino library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.
        
      - name: Install platform from build matrix
        run: |
          arduino-cli core update-index
          arduino-cli core install ${{ matrix.arduino-platform }} # for each job one platform is installed
          
      - name: List installed boards with their FQBN
        run: |
          arduino-cli board listall
          # ls -l $HOME/.arduino15/packages/ # I see only arduino and one of the Attiny cores but not all 3 together
          # echo -e HOME=\"$HOME\" # /home/runner
          # echo PWD=$PWD # /home/runner/work/Github-Actions-Test/Github-Actions-Test
          # which arduino-cli # /opt/hostedtoolcache/arduino-cli/0.9.0/x64/arduino-cli

                
      # Finally, we compile the sketch, using the FQBN that was set in the build matrix.
      - name: Compile all examples
        run: |
          if [ "${{ matrix.examples }}" == "" ]; then
          echo -e "Compiling ALL examples for platform ${{ matrix.arduino-platform }} \n"
          examples=($(find . -name "*.ino"))
          for example in "${examples[@]}"; do # Loop over all example directories
          echo -n "Compiling $(dirname $example) "
          build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${{ matrix.fqbn }} $(dirname $example) 2>&1); if [ $? -ne 0 ]; then echo -e """$RED""\xe2\x9c\x96"; echo "$build_stdout"; else echo -e ""$GREEN"\xe2\x9c\x93"; fi # If ok output a green check else a red X and the command output.
          done
          else
          echo -e "Compiling SELECTED examples for platform ${{ matrix.arduino-platform }} \n"
          for example in "${{ matrix.examples }}"; do
          echo -e "\n\nCompiling $example \n"
          build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${{ matrix.fqbn }} ./examples/$example 2>&1); if [ $? -ne 0 ]; then echo -e """$RED""\xe2\x9c\x96"; echo "$build_stdout"; else echo -e ""$GREEN"\xe2\x9c\x93"; fi # If ok output a green check else a red X and the command output.
          done
          fi
        shell: bash {0}
        
      ##########################################################
      # THIS DOES NOT YET WORK  
      #- name: Cache Arduino packages
      # does not work, since the cache does not contain all installed platforms :-(
      # And we can not build separate caches for each platform 
      #  id: arduino15-packages-env.MATRIX_PLATFORM <- This is a syntax error and this too: arduino15-packages-${{ matrix.arduino-platform }}
      #  uses: actions/cache@v1 # using version 1
      #  with:
      #    path: $HOME/.arduino15/packages/
      #    key: arduino15-packages-env.MATRIX_PLATFORM
