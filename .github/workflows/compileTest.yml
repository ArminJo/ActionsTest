# This is the name of the workflow, visible on GitHub UI.
name: compileTest
on: [push]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.

jobs:
  # This is the name of the job - can be whatever.
  compileTest-matrix:
    name: Test compiling one example

    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    strategy:

      matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`
        ####################################################################
        arduino-platform: ["arduino:avr", "digistump:avr", "ATTinyCore:avr"]
        ####################################################################


        # Define the FQBN of the boards we want to test for each platform.
        # This works like this: when the platformn is "digistump:avr", the
        # variable `fqbn` is set to "digistump:avr:digispark-tiny".
        ##################################################################
        include:
          - arduino-platform: "digistump:avr"
            fqbn: "digistump:avr:digispark-tiny1" # ATtiny85 board @1 MHz 
            
          - arduino-platform: "ATTinyCore:avr"
            fqbn: "ATTinyCore:avr:attinyx5:chip=85,clock=1internal"
            
          - arduino-platform: "arduino:avr"
            fqbn: "arduino:avr:uno"
            examples: all
        ###################################################################
        
      # Do not cancel all jobs / architectures if one job fails
      fail-fast: false

    # This is the platform GitHub will use to run our workflow, I
    # pick Ubuntu to reuse old shell scripts.
    runs-on: ubuntu-latest

    # This is the list of steps this job will run.
    steps:
    
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0
        
      - name: Cache Arduino packages
        id: cache-packages
        uses: actions/cache@v1
        with:
          path: ~/.arduino15/packages/
          key: arduino15-packages
            
      # Error check
      - name: Check for error
        if: failure()
        run: echo Failure on Setup Arduino CLI

      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
        
      - name: Link this repository as Arduino library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.
          
        
      # We then install the platform, which one will be determined
      # dynamically by the build matrix.
      - name: Install platform
        run: |
          arduino-cli core update-index
          arduino-cli core install ${{ matrix.arduino-platform }}
          
      - name: Show environment
        run: |
          # echo -e HOME=\"$HOME\" # /home/runner
          # echo PWD=$PWD # /home/runner/work/Github-Actions-Test/Github-Actions-Test
          # ls -Rl $HOME/Arduino
          arduino-cli board listall
          
      # Finally, we compile the sketch, using the FQBN that was set in the build matrix.
      # --verbose --warnings all
      - name: Compile Sketch
        run: arduino-cli compile --verbose --fqbn ${{ matrix.fqbn }} ./examples/SimpleFrequencyDetector
