# test.yml
# Github workflow script for script development.
#
# Copyright (C) 2020  Armin Joachimsmeyer
# https://github.com/ArminJo/Github-Actions
# License: MIT
#
# Before being able to push to my .github\workflows directories,
# I had to create a new personal token with workflow enabled at https://github.com/settings/tokens

# This is the name of the workflow, visible on GitHub UI.
name: test
on: 
  push: # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request
    paths:
    - '**.ino'
    - '**.cpp'
    - '**.h'
    - '**test.yml'

jobs:
  build:
    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples

    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.

    env:
      # Comma separated list without double quotes around the list. 
      REQUIRED_LIBRARIES: Adafruit NeoPixel,ATtinySerialOut
      CLI_VERSION: latest
      
      # Global color definitions for output colors
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      BLUE: '\033[0;34m'

    strategy:
      matrix:
        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`
        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the "arduino-builder -dump-prefs" command
        #
        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega
        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native"
        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro
        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8
        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80
        # You may add a suffix behind the fqbn with "|" to specify one board for e.g. different compile options like arduino:avr:uno|trace 
        #############################################################################################################
        arduino-boards-fqbn:
          - arduino:avr:uno
          - arduino:avr:uno|trace
          - digistump:avr:digispark-tiny1
          - ATTinyCore:avr:attinyx5:chip=85,clock=1internal
          - esp8266:esp8266:huzzah:eesz=4M3M,xtal=80
          - esp32:esp32:featheresp32:FlashFreq=80

        # Specify parameters for each board.
        # Parameters can be: examples-exclude and examples-build-properties
        #############################################################################################################
        include:
          - arduino-boards-fqbn: arduino:avr:uno
            sketch-names: WhistleSwitch.ino,SimpleFrequencyDetector.ino # Comma separated list of sketch names (no path required) or patterns to use in build
            examples-build-properties:
              WhistleSwitch:
                -DDEBUG
                -DFREQUENCY_RANGE_LOW
              SimpleFrequencyDetector:
                -DINFO

          - arduino-boards-fqbn: arduino:avr:uno|trace # UNO board with different build properties
            sketch-names: \*.ino # is default setting
            examples-exclude: 50Hz # Comma separated list of (unique substrings of) example names to exclude in build
            examples-build-properties:
              WhistleSwitch:
                -DDEBUG
                -DTRACE

          - arduino-boards-fqbn: digistump:avr:digispark-tiny1  # ATtiny85 board @1 MHz
            platform-url: http://digistump.com/package_digistump_index.json
            # examples-build-properties / aka setting compiler.cpp.extra_flags does not work for digistump:avr platform
            examples-exclude: WhistleSwitch,"Blink" # Comma separated list of (unique substrings of) example names to exclude in build

          - arduino-boards-fqbn: ATTinyCore:avr:attinyx5:chip=85,clock=1internal
            platform-url: http://drazzy.com/package_drazzy.com_index.json
            sketch-names: "*.ino,WhistleSwitch.ino"
            examples-build-properties:
              WhistleSwitch:
                -DFREQUENCY_RANGE_LOW

          - arduino-boards-fqbn: esp8266:esp8266:huzzah:eesz=4M3M,xtal=80
            platform-url: https://arduino.esp8266.com/stable/package_esp8266com_index.json
            examples-exclude: WhistleSwitch,50Hz SimpleFrequencyDetector

          - arduino-boards-fqbn: esp32:esp32:featheresp32:FlashFreq=80
            platform-url: https://dl.espressif.com/dl/package_esp32_index.json
            examples-exclude: WhistleSwitch 50Hz,SimpleFrequencyDetector
            
######################################################
# End of configuration, start of fixed script section
######################################################

      # Do not cancel all jobs / architectures if one job fails
      fail-fast: false

    # This is the list of steps this job will run.
    steps:

          #######################################
          #MATRIX="${{ toJson(matrix) }}"
          #echo MATRIX="$MATRIX" # Multi line output
          #echo MATRIX=$MATRIX   # Singele line output
          #echo matrix=$matrix   # empty
          #echo matrix=${{ matrix }} #=Object The string "Object"
          #########################################

      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      # This is an replacement for: "uses: arduino/setup-arduino-cli@v1.0.0"
      - name: Setup Arduino CLI
        run: |
          # if not already cached, download and install arduino IDE
          echo -n "arduino-cli "
          if [[ -f $RUNNER_TOOL_CACHE/arduino_ide/arduino-cli ]]; then
            echo -e "cached: ""$GREEN""\xe2\x9c\x93"
          else
            echo -n "downloading: "
            wget --quiet https://downloads.arduino.cc/arduino-cli/arduino-cli_${CLI_VERSION}_Linux_64bit.tar.gz
            if [[ $? -ne 0 ]]; then echo -e """$RED""\xe2\x9c\x96"; else echo -e """$GREEN""\xe2\x9c\x93"; fi
            echo -n "Upacking arduino-cli to ${RUNNER_TOOL_CACHE}/arduino_ide:  "
            if [[ ! -d $RUNNER_TOOL_CACHE/arduino_ide/ ]]; then
              mkdir $RUNNER_TOOL_CACHE/arduino_ide
            fi
            tar xf arduino-cli_${CLI_VERSION}_Linux_64bit.tar.gz -C $RUNNER_TOOL_CACHE/arduino_ide/
            if [[ $? -ne 0 ]]; then echo -e """$RED""\xe2\x9c\x96"; else echo -e """$GREEN""\xe2\x9c\x93"; fi
            ls -l $RUNNER_TOOL_CACHE/arduino_ide/*
            ls -l $RUNNER_TOOL_CACHE
          fi
          $RUNNER_TOOL_CACHE/arduino_ide/arduino-cli version
          echo "::add-path::${RUNNER_TOOL_CACHE}/arduino_ide" # add to path for next steps

      #- name: Cache Arduino packages
      # does not work, since we can not build separate caches for each platform
      #  id: arduino15-packages-env.MATRIX_PLATFORM <- This is a syntax error and this too: arduino15-packages-${PLATFORM}
      #  uses: actions/cache@v1 # using version 1
      #  with:
      #    path: $HOME/.arduino15/packages/
      #    key: arduino15-packages-env.MATRIX_PLATFORM

      - name: Dump variables
        env:
          REQUIRED_LIBRARIES_ENV: ${{ env.REQUIRED_LIBRARIES }}
          EXAMPLES_EXCLUDE: ${{ toJson(matrix.examples-exclude) }} # the content as string in double quotes with escaped double quotes if one token contains one
        run: |
          echo PWD=$PWD # /home/runner/work/Github-Actions/Github-Actions
          ls -l $PWD
          echo HOME=$HOME # /home/runner
          ls -l $HOME
          echo PATH=$PATH
          echo RUNNER_TOOL_CACHE=$RUNNER_TOOL_CACHE # /opt/hostedtoolcache
          echo AGENT_TOOLSDIRECTORY=$AGENT_TOOLSDIRECTORY # /opt/hostedtoolcache
          
          echo "matrix.examples-build-properties=${{ toJson(matrix.examples-build-properties) }}"

          echo -e "\n\nREQUIRED_LIBRARIES test\n"
          # here all quotes are escaped leading to have "Adafruit NeoPixel" or 'Adafruit NeoPixel' as 2 tokens each
          # gives the same results when using REQUIRED_LIBRARIES_ENV
          echo \$REQUIRED_LIBRARIES=$REQUIRED_LIBRARIES
          echo REQUIRED_LIBRARIES array=
          for word in $REQUIRED_LIBRARIES; do
            echo $word
          done

          # This gives one line "Adafruit NeoPixel" as one token and the line Adafruit NeoPixel as 2 token
          echo env.REQUIRED_LIBRARIES=${{ env.REQUIRED_LIBRARIES }}
          echo REQUIRED_LIBRARIES_ENV array=
          for word in ${{ env.REQUIRED_LIBRARIES }} ; do
            echo $word
          done

          # This gives always one array element!
          # 1 line WhistleSwitch Test (without double quotes) give WhistleSwitch Test as one array element!
          # 2 lines WhistleSwitch + "Test" give WhistleSwitch "Test" also as one array element!
          echo toJson\(matrix.examples-exclude\)=${{ toJson(matrix.examples-exclude) }} # gives WhistleSwitch Test or WhistleSwitch "Test"
          echo toJson\(matrix.examples-exclude\) array=
          for word in ${{ toJson(matrix.examples-exclude) }}; do
            echo $word
          done
          echo set=
          set

      - name: Connvert matrix to assoc array
        env:
          BUILD_PROPERTIES: ${{ toJson(matrix.examples-build-properties) }}
        run: |
          echo BUILD_PROPERTIES=$BUILD_PROPERTIES
          BUILD_PROPERTIES=${BUILD_PROPERTIES#\{} # remove "{"
          echo BUILD_PROPERTIES=$BUILD_PROPERTIES
          if [[ $BUILD_PROPERTIES != "null" ]]; then
          # (\w*): * first token before the colon and spaces, ([^,}]*) token after colon and spaces up to "," or "}", [,}] trailing characters
            echo 'sed result of $BUILD_PROPERTIES | '\''s/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g'\''=' # line 6
            echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g'
            declare -A PROP_MAP="( $(echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g' ) )"
            declare -p PROP_MAP # print properties of PROP_MAP
            # empty assoc arrays give error if key is <number><test>
            echo Property of 50Hz= ${PROP_MAP[50Hz]} # This works and gives "" since PROP_MAP is not empty
            # echo Property of 50Hz= ${P_M[50Hz]} # This gives error: value too great for base (error token is "50Hz")
            EXAMPLE_NAME=50Hz
            if [[ -n ${PROP_MAP[$EXAMPLE_NAME]} ]]; then
              echo -n "with ${PROP_MAP[$EXAMPLE_NAME]} "
            fi
          fi
        shell: bash {0} # Needed to avoid an exit at first error

      # Here we have only the matrix values for this job i.e. only one platform and fqbn
      #{ arduino-boards-fqbn: arduino:avr:uno, platform: arduino:avr, SimpleFrequencyDetector: -DDEBUG }
      #- name: Tests
      #  run: |
      #    echo Test start
      #    echo Test end
      #  shell: bash {0} # Needed to avoid an exit at first error

      - name: Link this repository as Arduino library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.
          echo "List $HOME/Arduino/libraries/"
          ls -l $HOME/Arduino/libraries/

      - name: Install platform from build matrix
        env: 
          ARDUINO_BOARD_FQBN: ${{ matrix.arduino-boards-fqbn }}
          PLATFORM_URL: ${{ matrix.platform-url }}
        run: |
          echo -e "\n\n"$YELLOW"Update index and install the required board platform"
            if [[ -z $ARDUINO_PLATFORM ]]; then
              remainder=${ARDUINO_BOARD_FQBN#*:}; PLATFORM=${ARDUINO_BOARD_FQBN%%:*}:${remainder%%:*}
            else
              PLATFORM=$ARDUINO_PLATFORM
            fi
            echo PLATFORM=${PLATFORM}
            if [[ ${PLATFORM} != *arduino* && -z $PLATFORM_URL ]]; then
              echo -e "::error::Non Arduino platform $PLATFORM requested, but \"platform-url\" parameter is missing."
              exit 1
            fi
            
            if [[ -n $PLATFORM_URL ]]; then
              PLATFORM_URL=${PLATFORM_URL// /,} # replace space by comma to enable multiple urls which are space separated
              PLATFORM_URL_COMMAND="--additional-urls"
            fi
            
            PLATFORM=${PLATFORM//,/ } # replace all comma by space to enable multiple platforms which are comma separated
            declare -a PLATFORM_ARRAY=( $PLATFORM )
            #declare -p PLATFORM_ARRAY # print properties of PLATFORM_ARRAY
            for single_platform in "${PLATFORM_ARRAY[@]}"; do # Loop over all platforms specified
                echo -e "arduino-cli core update-index $PLATFORM_URL_COMMAND $PLATFORM_URL > /dev/null"
                arduino-cli core update-index $PLATFORM_URL_COMMAND $PLATFORM_URL > /dev/null # must specify --additional-urls here
                echo -e "arduino-cli core install $single_platform $PLATFORM_URL_COMMAND $PLATFORM_URL > /dev/null"
                arduino-cli core install $single_platform $PLATFORM_URL_COMMAND $PLATFORM_URL > /dev/null
            done
            
            if [[ ${PLATFORM} == esp8266:esp8266 && ! -f /usr/bin/python3 ]]; then
              # python3 is a link in the esp8266 package: /github/home/.arduino15/packages/esp8266/tools/python3/3.7.2-post1/python3 -> /usr/bin/python3
              echo "install python3 for ESP8266"
              apt-get install -qq python3 > /dev/null
            fi
                      
            if [[ $PLATFORM == esp32:esp32 ]]; then
              if [[ ! -f /usr/bin/pip ]]; then
                echo "install python and pip for ESP32"
                apt-get install -qq python-pip > /dev/null # this installs also python
              fi
              pip install pyserial
            fi
        shell: bash {0} # Needed to avoid an exit at first error

      - name: List installed boards with their FQBN
        run: |
          arduino-cli board listall
          # ls -l $HOME/.arduino15/packages/ # I see only arduino and one of the Attiny cores but not all 3 together
          # echo -e HOME=\"$HOME\" # /home/runner
          # echo PWD=$PWD # /home/runner/work/Github-Actions-Test/Github-Actions-Test
          # which arduino-cli # /opt/hostedtoolcache/arduino-cli/0.9.0/x64/arduino-cli

      - name: Install libraries
        run: |
          if [[ -z $REQUIRED_LIBRARIES ]]; then
            echo "No additional libraries to install"
          else
            echo "Install libraries $REQUIRED_LIBRARIES"
            # Support comma separated library list
            echo "IFS=$IFS"
            BACKUP_IFS="$IFS"
            IFS=$','
            declare -a REQUIRED_LIBRARIES_ARRAY=( $REQUIRED_LIBRARIES )
            IFS="$BACKUP_IFS"            
            declare -p REQUIRED_LIBRARIES_ARRAY # print properties of REQUIRED_LIBRARIES_ARRAY
            echo "Install libraries list ${REQUIRED_LIBRARIES_ARRAY[@]}"
            arduino-cli lib install "${REQUIRED_LIBRARIES_ARRAY[@]}"
          fi

      # Finally, we compile the sketch, using the FQBN that was set in the build matrix.
      - name: Compile all examples
        env:
          ARDUINO_BOARD_FQBN: ${{ matrix.arduino-boards-fqbn }}
          BUILD_PROPERTIES: ${{ toJson(matrix.examples-build-properties) }}
          SKETCH_NAMES: ${{ matrix.sketch-names }}
          EXAMPLES_EXCLUDE: ${{ matrix.examples-exclude }}
        run: |
          if [[ -z $SKETCH_NAMES ]]; then echo -e "Set SKETCH_NAMES to default value: \"*.ino\""; SKETCH_NAMES='*.ino'; fi
          BUILD_PROPERTIES=${BUILD_PROPERTIES#\{} # remove "{"
          # if matrix.examples-build-properties are specified, create an associative shell array
          # Because of a bug in bash if array is empty - PROP_MAP[50j] gives: value too great for base (error token is "50j") - we create a dummy array
          if [[ $BUILD_PROPERTIES != null ]]; then declare -A PROP_MAP="( $(echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g' ) )"; else declare -A PROP_MAP=( [dummy]=dummy ); fi
          echo -e "Compiling examples for board ${{ matrix.arduino-boards-fqbn }} \n"
          BACKUP_IFS="$IFS"
          IFS=$','
          declare -a SKETCH_NAMES_ARRAY=( $SKETCH_NAMES )
          declare -p SKETCH_NAMES_ARRAY
          IFS="$BACKUP_IFS"
          for sketch_name in "${SKETCH_NAMES_ARRAY[@]}"; do # Loop over all sketch names
            declare -a SKETCHES=($(find . -name "$sketch_name"))
            declare -p SKETCHES
            for sketch in "${SKETCHES[@]}"; do # Loop over all sketch files
              SKETCH_PATH=$(dirname $sketch) # complete path to sketch
              SKETCH_DIR=${SKETCH_PATH##*/}  # directory of sketch, must match sketch basename
              SKETCH_FILENAME=$(basename $sketch) # complete name of sketch
              SKETCH_EXTENSION=${SKETCH_FILENAME##*.} # extension of sketch
              SKETCH_BASENAME=${SKETCH_FILENAME%%.*} # name wihout extension / basename of sketch, must match directory name
              if [[ $EXAMPLES_EXCLUDE == *"$SKETCH_BASENAME"* ]]; then
                echo -e "Skipping $SKETCH_BASENAME \xe2\x9e\x9e" # Right arrow
              else
                # If sketch name does not end with .ino, rename it locally
                if [[ $SKETCH_EXTENSION != ino ]]; then
                  echo "Rename ${SKETCH_PATH}/${SKETCH_FILENAME} to ${SKETCH_PATH}/${SKETCH_BASENAME}.ino"
                  mv ${SKETCH_PATH}/${SKETCH_FILENAME} ${SKETCH_PATH}/${SKETCH_BASENAME}.ino
                fi
                # If directory name does not match sketch name, create an appropriate directory, copy the files recursively and compile
                if [[ $SKETCH_DIR != $SKETCH_BASENAME ]]; then
                  mkdir $HOME/$SKETCH_BASENAME
                  echo "Creating directory $HOME/$SKETCH_BASENAME and copy ${SKETCH_PATH}/* to it"
                  cp -R ${SKETCH_PATH}/* $HOME/$SKETCH_BASENAME
                  SKETCH_PATH=$HOME/$SKETCH_BASENAME
                fi
                # check if there is an entry in the associative array and create compile parameter to put in compiler.cpp.extra_flags
                echo -n "Compiling $SKETCH_BASENAME "
                if [[ -n ${PROP_MAP[$SKETCH_BASENAME]} ]]; then
                  echo -n "with ${PROP_MAP[$SKETCH_BASENAME]} "
                fi
                if [[ $DEBUG == true ]]; then
                  echo "Debug mode enabled => compile output will be printed also for successful compilation"
                  arduino-cli compile --verbose --warnings all --fqbn ${ARDUINO_BOARD_FQBN%|*} --build-properties compiler.cpp.extra_flags="${PROP_MAP[$SKETCH_BASENAME]}" $SKETCH_PATH
                else
                  build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${ARDUINO_BOARD_FQBN%|*} --build-properties compiler.cpp.extra_flags="${PROP_MAP[$SKETCH_BASENAME]}" $SKETCH_PATH 2>&1)
                fi
                if [[ $? -ne 0 ]]; then
                  echo -e ""$RED"\xe2\x9c\x96" # If ok output a green checkmark else a red X and the command output.
                  echo "::error::Compile of  $SKETCH_BASENAME ${PROP_MAP[$SKETCH_BASENAME]} failed"
                  exit_code=1
                  if [[ $DEBUG != true ]]; then
                    echo -e "$build_stdout \n"
                  fi
                else
                  echo -e ""$GREEN"\xe2\x9c\x93"
                fi
                echo "arduino-cli compile --verbose --warnings all --fqbn ${ARDUINO_BOARD_FQBN%|*} --build-properties compiler.cpp.extra_flags=\"${PROP_MAP[$SKETCH_BASENAME]}\" $SKETCH_PATH"
              fi
            done
          done
          exit $exit_code
        shell: bash {0} # Needed to avoid an exit at first error

      ##########################################################
      # THIS CACHE TEST DOES NOT YET WORK

