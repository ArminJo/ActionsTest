# test.yml
# Github workflow script for script development.
#
# Copyright (C) 2020  Armin Joachimsmeyer
# https://github.com/ArminJo/Github-Actions
# License: MIT
#
# Before being able to push to my .github\workflows directories,
# I had to create a new personal token with workflow enabled at https://github.com/settings/tokens

# This is the name of the workflow, visible on GitHub UI.
name: test
on: [push, pull_request] # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request

jobs:
  build:
    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples

    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.

    env:
      # Space separated list without double quotes around the list. 
      # If you need a library with a space in its name, like Adafruit NeoPixel or Adafruit INA219, you must use double quotes
      # around the name and have at least 2 entries, where the first must be without double quotes! You may use Servo as dummy entry.
      REQUIRED_LIBRARIES: Servo "Adafruit NeoPixel"

      # Global color definitions for output colors
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      BLUE: '\033[0;34m'

    strategy:
      matrix:
        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`
        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the "arduino-builder -dump-prefs" command
        #
        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega
        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native"
        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro
        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8
        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80
        # You may add a suffix behind the fqbn with "|" to specify one board for e.g. different compile options like arduino:avr:uno|trace 
        #############################################################################################################
        arduino-boards-fqbn:
          - arduino:avr:uno
          - arduino:avr:uno|trace
          - digistump:avr:digispark-tiny1
          - ATTinyCore:avr:attinyx5:chip=85,clock=1internal

        # Choose the right platform for the boards we want to test. (maybe in the future Arduino will automatically do this for you)
        # This works like this: when the fqbn is "arduino:avr:uno" the variable `platform` is set to "arduino:avr".
        # Just take the first 2 token of the fqbn - this cannot be automatically done by GitHub workflow :-(
        #############################################################################################################
        include:
          - arduino-boards-fqbn: digistump:avr:digispark-tiny1  # ATtiny85 board @1 MHz
            platform: digistump:avr
            # examples-build-properties / aka setting compiler.cpp.extra_flags does not work for digistump:avr platform
            examples-exclude: WhistleSwitch "Test" # Space separated list of (unique substrings of) example names to exclude in build

          - arduino-boards-fqbn: ATTinyCore:avr:attinyx5:chip=85,clock=1internal
            platform: ATTinyCore:avr
            examples-build-properties:
              WhistleSwitch:
                -DFREQUENCY_RANGE_LOW

          - arduino-boards-fqbn: arduino:avr:uno
            platform: arduino:avr
            examples-exclude: 50Hz # Space separated list of (unique substrings of) example names to exclude in build
            SimpleFrequencyDetector: -DDEBUG
            WhistleSwitch: -DINFO
            examples-build-properties:
              WhistleSwitch:
                -DDEBUG

          - arduino-boards-fqbn: arduino:avr:uno|trace
            platform: arduino:avr
            examples-exclude: 50Hz # Space separated list of (unique substrings of) example names to exclude in build
            SimpleFrequencyDetector: -DTRACE
            WhistleSwitch: -DTRACE
            examples-build-properties:
              WhistleSwitch:
                -DDEBUG
                -DTRACE

######################################################
# End of configuration, start of fixed script section
######################################################

      # Do not cancel all jobs / architectures if one job fails
      fail-fast: false

    # This is the list of steps this job will run.
    steps:

          #######################################
          #MATRIX="${{ toJson(matrix) }}"
          #echo MATRIX="$MATRIX" # Multi line output
          #echo MATRIX=$MATRIX   # Singele line output
          #echo matrix=$matrix   # empty
          #echo matrix=${{ matrix }} #=Object The string "Object"
          #########################################

      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@master

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0

      #- name: Cache Arduino packages
      # does not work, since we can not build separate caches for each platform
      #  id: arduino15-packages-env.MATRIX_PLATFORM <- This is a syntax error and this too: arduino15-packages-${{ matrix.platform }}
      #  uses: actions/cache@v1 # using version 1
      #  with:
      #    path: $HOME/.arduino15/packages/
      #    key: arduino15-packages-env.MATRIX_PLATFORM

      - name: Dump variables
        env:
          REQUIRED_LIBRARIES_ENV: ${{ env.REQUIRED_LIBRARIES }}
          EXAMPLES_EXCLUDE: ${{ toJson(matrix.examples-exclude) }} # the content as string in double quotes with escaped double quotes if one token contains one
        run: |
          echo "matrix.examples-build-properties=${{ toJson(matrix.examples-build-properties) }}"


          echo -e "\n\nREQUIRED_LIBRARIES test\n"
          # here all quotes are escaped leading to have "Adafruit NeoPixel" or 'Adafruit NeoPixel' as 2 tokens each
          echo \$REQUIRED_LIBRARIES=$REQUIRED_LIBRARIES
          echo REQUIRED_LIBRARIES array=
          for word in $REQUIRED_LIBRARIES; do
            echo $word
          done

          # give the same results as with REQUIRED_LIBRARIES
          echo \$REQUIRED_LIBRARIES_ENV=$REQUIRED_LIBRARIES_ENV
          echo REQUIRED_LIBRARIES_ENV array=
          for word in $REQUIRED_LIBRARIES_ENV; do
            echo $word
          done

          # This gives one line "Adafruit NeoPixel" as one token and the line Adafruit NeoPixel as 2 token
          echo env.REQUIRED_LIBRARIES=${{ env.REQUIRED_LIBRARIES }}
          echo REQUIRED_LIBRARIES_ENV array=
          for word in ${{ env.REQUIRED_LIBRARIES }} ; do
            echo $word
          done

          echo -e "\n\nmatrix.examples-exclude test gives 3 different results\n"
          # 2 lines (without any double quotes) WhistleSwitch + Test give for all 3 test the same results as one line WhistleSwitch Test!
          # If we have a quoted entry at one line it is taken as one array element including the quotes

          # 1 line WhistleSwitch Test (without double quotes) give WhistleSwitch Test as 2 token "WhistleSwitch and Test"
          # 2 lines WhistleSwitch + "Test" give "WhistleSwitch \"Test\"" and 2 token "WhistleSwitch and \"Test\""
          echo env \$EXAMPLES_EXCLUDE=$EXAMPLES_EXCLUDE # gives "WhistleSwitch Test" or "WhistleSwitch \"Test\""
          echo env EXAMPLES_EXCLUDE array=
          for word in $EXAMPLES_EXCLUDE; do
            echo $word
          done

          # 1 line WhistleSwitch Test (without double quotes) give WhistleSwitch Test as 2 array elements WhistleSwitch and Test
          EXCLUDE=${{ toJson(matrix.examples-exclude) }} # gives WhistleSwitch Test or WhistleSwitch "Test"
          echo EXCLUDE=toJson...  =$EXCLUDE
          echo EXCLUDE=toJson...  array=
          for word in $EXCLUDE; do
            echo $word
          done

          # This gives always one array element!
          # 1 line WhistleSwitch Test (without double quotes) give WhistleSwitch Test as one array element!
          # 2 lines WhistleSwitch + "Test" give WhistleSwitch "Test" also as one array element!
          echo toJson\(matrix.examples-exclude\)=${{ toJson(matrix.examples-exclude) }} # gives WhistleSwitch Test or WhistleSwitch "Test"
          echo toJson\(matrix.examples-exclude\) array=
          for word in ${{ toJson(matrix.examples-exclude) }}; do
            echo $word
          done

      - name: Connvert matrix to assoc array
        env:
          BUILD_PROPERTIES: ${{ toJson(matrix.examples-build-properties) }}
        run: |
          echo BUILD_PROPERTIES=$BUILD_PROPERTIES
          BUILD_PROPERTIES=${BUILD_PROPERTIES#\{} # remove "{"
          echo BUILD_PROPERTIES=$BUILD_PROPERTIES
          if [[ $BUILD_PROPERTIES != "null" ]]; then
          # (\w*): * first token before the colon and spaces, ([^,}]*) token after colon and spaces up to "," or "}", [,}] trailing characters
            echo 'sed result of $BUILD_PROPERTIES | '\''s/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g'\''=' # line 6
            echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g'
            declare -A PROP_MAP="( $(echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g' ) )"
            declare -p PROP_MAP # print properties of PROP_MAP
            EXAMPLE=SimpleFrequencyDetector
            echo Property of $EXAMPLE= ${PROP_MAP[$EXAMPLE]}
            echo Property of 50Hz= ${PROP_MAP[50Hz]}
            EXAMPLE_NAME=50Hz
            if [[ "${PROP_MAP[$EXAMPLE_NAME]}" != "" ]]; then
              echo -n "with ${PROP_MAP[$EXAMPLE_NAME]} "
            fi
          fi
        shell: bash {0} # Needed to avoid an exit at first error

      # Here we have only the matrix values for this job i.e. only one platform and fqbn
      #{ arduino-boards-fqbn: arduino:avr:uno, platform: arduino:avr, SimpleFrequencyDetector: -DDEBUG }
      #- name: Tests
      #  run: |
      #    echo Test start
      #    echo Test end
      #  shell: bash {0} # Needed to avoid an exit at first error

      - name: Link this repository as Arduino library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $PWD $HOME/Arduino/libraries/.

      - name: Install platform from build matrix
        env: 
          FQBN: ${{ matrix.arduino-boards-fqbn }}
        run: |
          arduino-cli core update-index
          if [ "${{  matrix.platform }}" == "" ]; then echo -e ""$RED"ERROR: platform missing for board ${FQBN%|*}. Check your matrix.includes entries"; exit 1; fi
          if [[ ${{  matrix.platform }} != *"arduino"* && ! -f ./arduino-cli.yaml ]]; then echo -e ""$RED"Non Arduino platform ${{  matrix.platform }} requested, but file arduino-cli.yaml is missing."; exit 1; fi
          arduino-cli core install ${{ matrix.platform }} # for each job / board one platform is installed
          arduino-cli board listall
          if [ ${{  matrix.platform }} == "esp32:esp32" ]; then pip install pyserial; fi

      - name: List installed boards with their FQBN
        run: |
          arduino-cli board listall
          # ls -l $HOME/.arduino15/packages/ # I see only arduino and one of the Attiny cores but not all 3 together
          # echo -e HOME=\"$HOME\" # /home/runner
          # echo PWD=$PWD # /home/runner/work/Github-Actions-Test/Github-Actions-Test
          # which arduino-cli # /opt/hostedtoolcache/arduino-cli/0.9.0/x64/arduino-cli

      - name: Install libraries
        run: if [[ "$REQUIRED_LIBRARIES" != "" ]]; then arduino-cli lib install ${{ env.REQUIRED_LIBRARIES }}; fi

      # Finally, we compile the sketch, using the FQBN that was set in the build matrix.
      - name: Compile all examples
        env:
          FQBN: ${{ matrix.arduino-boards-fqbn }}
          BUILD_PROPERTIES: ${{ toJson(matrix.examples-build-properties) }}
        run: |
          BUILD_PROPERTIES=${BUILD_PROPERTIES#\{} # remove "{"
          # if matrix.examples-build-properties are specified, create an associative shell array
          # Because of a bug in bash if array is empty - PROP_MAP[50j] gives: value too great for base (error token is "50j") - we create a dummy array
          if [[ $BUILD_PROPERTIES != "null" ]]; then declare -A PROP_MAP="( $(echo $BUILD_PROPERTIES | sed -E 's/"(\w*)": *([^,}]*)[,}]/\[\1\]=\2/g' ) )"; else declare -A PROP_MAP=( [dummy]=dummy ); fi
          echo -e "Compiling examples for board ${{ matrix.arduino-boards-fqbn }} \n"
          EXAMPLES=($(find . -name "*.ino"))
          for example in "${EXAMPLES[@]}"; do # Loop over all example directories
            EXAMPLE_NAME=$(basename $(dirname $example))
            if [[ "${{ matrix.examples-exclude }}" == *"$EXAMPLE_NAME"* ]]; then
              echo -e "Skipping $EXAMPLE_NAME \xe2\x9e\x9e" # Right arrow
            else
              # check if there is an entry in the associative array and create a compile parameter
              echo "arduino-cli compile --verbose --warnings all --fqbn ${FQBN%|*} --build-properties compiler.cpp.extra_flags=\"${PROP_MAP[$EXAMPLE_NAME]}\" $(dirname $example)"
              echo -n "Compiling $EXAMPLE_NAME "
              if [[ "${PROP_MAP[$EXAMPLE_NAME]}" != "" ]]; then
                echo -n "with ${PROP_MAP[$EXAMPLE_NAME]} "
              fi
              build_stdout=$(arduino-cli compile --verbose --warnings all --fqbn ${FQBN%|*} --build-properties compiler.cpp.extra_flags="${PROP_MAP[$EXAMPLE_NAME]}" $(dirname $example) 2>&1);
              if [ $? -ne 0 ]; then
                echo -e ""$RED"\xe2\x9c\x96" # If ok output a green checkmark else a red X and the command output.
                exit_code=1
                echo -e "$build_stdout \n"
              else
                echo -e ""$GREEN"\xe2\x9c\x93"
              fi
            fi
          done
          exit $exit_code
        shell: bash {0} # Needed to avoid an exit at first error

      ##########################################################
      # THIS CACHE TEST DOES NOT YET WORK

